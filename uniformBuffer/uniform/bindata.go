// Code generated by go-bindata.
// sources:
// shaders/tri-frag.spv
// shaders/tri-vert.spv
// shaders/tri.frag
// shaders/tri.vert
// DO NOT EDIT!

package uniform

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _shadersTriFragSpv = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x54\x90\xcb\x4a\xc3\x50\x10\x86\xbf\xe4\x24\x4d\x6f\xf6\x62\x41\x77\x52\x71\x29\x94\x22\x55\x04\x51\x51\xc1\x6e\xba\xf0\xf2\x00\xe1\xd8\x86\xb4\x5a\xdb\x92\xa4\xae\x7d\x04\x1f\xd7\x8d\x20\x67\x3a\x8b\x36\x10\x92\xf9\xe6\x9f\x39\xff\x7f\x8c\x7f\x12\x81\x47\x44\x99\x0e\x9b\xa7\x8d\x8f\x07\xd4\x28\xc9\x77\x38\x7a\x1d\xf5\xf2\x62\xd2\x1b\x9c\xf7\x5d\xbf\x81\x11\x9d\xeb\x35\x89\x08\x40\xde\x4f\x3b\x5b\x38\x5e\x01\xea\x40\x0b\x23\x3c\x02\x0c\x06\x1f\xf8\xf1\x9c\xb6\xc2\x70\x14\xdf\xbd\xdc\xc7\x79\xb2\xb2\x99\x2d\x92\x38\x9f\xda\x49\x92\xc5\xcb\xb7\xf7\x64\x5c\xe4\xbb\x9a\xa9\x9d\xcc\x16\x69\x3c\xb7\x8b\x74\x6d\xd3\x24\x1e\x9c\xf5\x57\x76\xfc\x41\x48\xb0\x73\x6e\x48\x28\x67\xaf\x1f\x33\x9b\x3e\x2c\xe7\xcb\x6c\xc3\x9c\x97\xaf\x24\x2b\x14\x31\x94\xed\x70\xa4\x79\x5d\x5d\xdf\xaa\x3b\xf8\xe2\xf5\x58\x5c\x23\xff\x07\x18\x4a\x40\x17\x38\x24\x90\x4c\x25\xcd\xdd\x25\xa0\x2c\x19\x37\x59\xaf\xb4\xae\x28\x73\xfa\xaa\xea\x8d\xea\x6b\x7a\x7f\x55\xd5\xd7\xf4\xce\x1c\x3b\x25\x10\x6d\x43\xdc\x7c\xdf\x5e\x10\x8a\x87\x40\xfd\xb9\x1d\xbf\xf8\x84\xc0\xb5\xee\xde\xd3\xf9\x67\x42\x99\x6d\x2a\x63\x8b\xb5\x94\x79\x5b\xac\xad\xcc\xed\x7f\x22\x12\xff\xfb\x3a\xdf\xd2\xbe\xf3\x71\x83\x91\x3c\xae\xf7\x87\xc7\x25\x1e\xff\x01\x00\x00\xff\xff\xd7\x50\xd2\x7b\x3c\x02\x00\x00")

func shadersTriFragSpvBytes() ([]byte, error) {
	return bindataRead(
		_shadersTriFragSpv,
		"shaders/tri-frag.spv",
	)
}

func shadersTriFragSpv() (*asset, error) {
	bytes, err := shadersTriFragSpvBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "shaders/tri-frag.spv", size: 572, mode: os.FileMode(438), modTime: time.Unix(1566975556, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _shadersTriVertSpv = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x5c\x53\x5d\x6f\xd3\x40\x10\x1c\xfb\xfc\xd1\xb4\xb4\x34\x2d\xfd\xe0\xa3\x25\x21\x09\x3c\x20\x55\x15\x2a\x08\x09\x15\xd4\x16\x29\x7d\x88\x44\xa1\x82\x57\xcb\x4d\x2e\xa9\xc1\xb1\x23\xdb\xa9\x10\x4f\xfc\x05\xfe\x12\xbf\x8a\x17\x24\x74\xeb\x71\xe4\x72\x52\x94\xdb\x99\xbd\xdd\x99\xf5\x9d\xb2\x3b\x3e\x60\xc1\xc7\x12\x9e\xa1\x5c\x4d\xd8\xb0\x00\xac\xc0\x93\xff\xfe\xe0\x72\x70\x90\x17\xa3\x83\xa3\x97\x87\x86\x5f\x83\x92\x3c\xc3\xdd\x45\x43\xf6\x0e\x80\x69\x18\x25\x66\xbf\x0a\xe0\x3e\x80\x2e\x80\x1e\x00\x05\x05\x1b\xc0\x6f\xcb\xe4\x35\xd0\x1f\x04\x27\x9f\x4e\x83\x5c\xcf\xc2\x2c\x2c\x74\x90\x5f\x87\x23\x9d\x05\xe9\xd5\x57\x3d\x2c\xf2\xdb\x39\xd7\xe1\x28\x4a\x26\x41\x1c\x26\x93\x79\x38\xd1\xc1\xd1\x8b\xc3\x59\x38\xfc\x06\x17\xce\xad\x9e\x2e\x3c\xac\x00\x98\xc4\xc1\x85\xce\xbe\xe8\xac\xd0\xdf\x0d\xee\x11\x07\xb9\x34\x8f\x8a\x28\x4d\xe0\xc1\x17\xdc\xaa\xf0\x28\x29\x2e\xa3\x1f\xba\x3c\x53\x72\x76\xc9\x9d\xc5\xd1\xec\x7d\x94\x17\x61\x32\xd4\x0b\x4e\x91\x9b\xc7\xf1\x82\x73\xa1\xc4\x7b\xa9\xc7\x47\x13\xc0\xe7\x24\x1a\xa7\xd9\xf4\x74\x3e\x1e\xeb\xec\x83\x38\x84\x07\x47\x38\xb3\xa6\x37\x33\x39\xb7\x09\x60\x7e\x95\xca\xde\xcc\x6e\x96\xe6\x70\xe1\xca\x0c\x6f\x74\x56\x9c\xa5\x71\x9a\x49\x5d\x47\x66\x3a\x64\x7c\x0e\x77\xe1\xaf\xfa\xaf\x30\x8b\x98\x55\xc3\x6c\x62\xaa\x86\x29\x62\x66\x9e\x7d\xa8\x45\xde\x79\x4d\xa7\xcb\xfc\x2a\xee\xd4\x7a\x55\x98\x0f\x60\x9d\x35\x9a\xac\xd1\x87\x23\xde\x9e\x30\xa7\x8a\xdb\xb5\xd8\xf8\xdd\xaf\xc5\xdd\xff\xe2\x1e\x63\xe3\x63\x13\xb6\xd4\x6d\xcb\xad\x2a\x7b\x6c\x43\xc1\x03\xd0\x02\xb0\x03\x47\x74\x78\xf4\xb3\x05\x07\x4b\xe4\xcc\x7a\xce\xb8\xc1\x7a\x8f\xe0\x60\x99\xf9\x0d\xe9\x53\xde\x97\xaa\xc6\x32\x7f\x2d\x38\xb8\x53\x9b\xd5\x1b\xc6\xab\xc4\x4c\x9f\x35\xf6\xb1\xd8\x67\x4d\xde\x47\xb9\x76\xe1\xc8\x6c\x7c\xea\xda\xe7\x8c\xd6\x59\x7b\x83\x5e\x9a\xac\xbd\x21\x5e\x4b\xcc\xf0\xf7\xb8\x5f\xa7\xc7\x1d\xea\x53\xe4\x77\xd9\x77\x87\xe7\x77\xf9\x06\x2b\x2d\x26\xf7\xa1\x28\xf9\xf9\xce\xe4\xb7\x79\xd6\xe7\xf9\x0e\xe3\xea\x7c\x87\xef\x57\xd5\xea\xf5\x58\xef\x15\x5c\xd1\xe2\xd0\x9b\xc9\xf9\x03\x5b\xee\xc8\x09\x5c\xd1\xba\x45\xfd\xc6\xff\x31\xbd\x6f\x13\x3f\xa6\xfe\x07\xd4\xf8\x51\x5e\xaf\xf9\x16\x25\x86\x1a\xb6\x47\xcc\xaa\x61\xfb\xc4\x8c\x86\x0b\xf8\xe2\xe1\x31\xcf\xef\x91\x37\x5e\x7f\xc9\x2b\x2c\xbf\xc9\x36\x73\x8c\xbe\x36\xef\xe3\x2a\xf5\xbd\x85\x92\xb8\x55\xd3\xf6\x94\x7e\x0d\xd7\x65\xfc\x17\x16\x5e\xc3\xc2\xbf\x00\x00\x00\xff\xff\x74\x73\xd4\xed\x34\x05\x00\x00")

func shadersTriVertSpvBytes() ([]byte, error) {
	return bindataRead(
		_shadersTriVertSpv,
		"shaders/tri-vert.spv",
	)
}

func shadersTriVertSpv() (*asset, error) {
	bytes, err := shadersTriVertSpvBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "shaders/tri-vert.spv", size: 1332, mode: os.FileMode(438), modTime: time.Unix(1568531771, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _shadersTriFrag = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x92\x4f\x6f\x9b\x40\x10\xc5\xef\x96\xfc\x1d\x9e\x9c\x8b\x23\xb9\x40\xdc\xa8\x87\x44\x39\x10\xe7\x4f\x51\x23\x5b\x32\x4e\xa3\x9c\xac\xf5\x32\x86\x69\xd7\xbb\x74\x77\x01\xd3\xaa\xdf\xbd\x82\xd8\x51\xa2\xb6\x48\x1c\xd8\x79\xef\xf1\xdb\x99\x09\x43\xcc\x4c\xd9\x5a\xce\x0b\x8f\x69\x74\xf6\x09\xf7\xc6\xe4\x8a\x90\x68\x19\x20\x56\x0a\xcb\xae\xe4\xb0\x24\x47\xb6\xa6\x2c\x18\x0e\xc2\xb0\x7b\xf1\xc0\x92\xb4\xa3\x0c\x95\xce\xc8\xc2\x17\x84\xb8\x14\xb2\xa0\x63\x65\x82\xaf\x64\x1d\x1b\x8d\x69\x10\x61\xdc\x09\x46\x87\xd2\xe8\xf4\xb2\xcf\x68\x4d\x85\x9d\x68\xa1\x8d\x47\xe5\x08\xbe\x60\x87\x2d\x2b\x02\xed\x25\x95\x1e\xac\x21\xcd\xae\x54\x2c\xb4\x24\x34\xec\x8b\xfe\x47\x87\x98\x1e\x06\xcf\x87\x10\xb3\xf1\x82\x35\x04\xa4\x29\x5b\x98\xed\x5b\x25\x84\x7f\x05\xef\x9e\xc2\xfb\xf2\x22\x0c\x9b\xa6\x09\x44\x0f\x1d\x18\x9b\x87\xea\x45\xec\xc2\x87\x64\x76\x3b\x4f\x6f\x3f\x4c\x83\xe8\xd5\xf6\xa8\x15\x39\x07\x4b\x3f\x2a\xb6\x94\x61\xd3\x42\x94\xa5\x62\x29\x36\x8a\xa0\x44\x03\x63\x21\x72\x4b\x94\xc1\x9b\x8e\xbc\xb1\xec\x59\xe7\x13\x38\xb3\xf5\x8d\xb0\xd4\xe7\x64\xec\xbc\xe5\x4d\xe5\xdf\xb5\xee\xc8\xc9\xee\x9d\xc0\x68\x08\x8d\x51\x9c\x22\x49\x47\xb8\x8e\xd3\x24\x9d\xf4\x29\x4f\xc9\xea\xf3\xe2\x71\x85\xa7\x78\xb9\x8c\xe7\xab\xe4\x36\xc5\x62\x89\xd9\x62\x7e\x93\xac\x92\xc5\x3c\xc5\xe2\x0e\xf1\xfc\x19\x5f\x92\xf9\xcd\x04\xc4\xbe\x20\x0b\xda\x97\xb6\xbb\x83\xb1\xe0\xae\xa9\x87\x71\x22\x25\x7a\x07\xb1\x35\x2f\x50\xae\x24\xc9\x5b\x96\x50\x42\xe7\x95\xc8\x09\xb9\xa9\xc9\x6a\xd6\x39\x4a\xb2\x3b\x76\xdd\x78\x1d\x84\xce\xfa\x1c\xc5\x3b\xf6\xc2\xf7\x67\x7f\x5d\x2d\x18\x0e\x4e\xea\xc3\x42\x9c\x47\xd1\x70\x70\x42\x7b\x4f\xba\xff\xbe\x7f\x58\xc7\xcb\xeb\xb5\xa3\x52\x58\xe1\x69\xed\x0a\x91\x91\x5d\x9b\xcd\x37\x92\xde\xe1\x02\xa4\xbb\x2e\xff\xd3\x53\x88\x8c\x75\xbe\x3e\x22\xae\xcf\xa7\x51\x29\xe4\xf7\x37\xa6\xe1\x40\x89\xd6\x54\x1e\x63\x65\x64\x8f\x87\x2b\x44\xa7\xdd\x88\x6a\x92\x1f\x51\x93\xf5\x33\xa3\x8c\xbd\xfc\x9f\xb2\x3b\xaa\x49\x9e\xa3\xba\xb3\x22\x3f\x6a\x6b\xc3\x19\x76\x82\xf5\xf8\x14\xbf\x86\x03\xe0\x4d\x19\x57\xbd\x61\xfc\x9a\x1d\xec\xdb\x9f\x13\x9c\x05\x51\xb7\xfa\xbf\x87\x83\x3f\x01\x00\x00\xff\xff\xc3\x59\x17\x3e\x7a\x03\x00\x00")

func shadersTriFragBytes() ([]byte, error) {
	return bindataRead(
		_shadersTriFrag,
		"shaders/tri.frag",
	)
}

func shadersTriFrag() (*asset, error) {
	bytes, err := shadersTriFragBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "shaders/tri.frag", size: 890, mode: os.FileMode(438), modTime: time.Unix(1563944699, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _shadersTriVert = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x93\x5d\x6f\xe2\x38\x14\x86\xef\x91\xf8\x0f\xaf\xe8\x0d\x5d\xb1\x09\x65\xd9\xbd\x28\xea\x45\x4a\xbb\xdd\x68\x2b\x58\x11\xba\x55\xaf\x90\x93\x9c\x24\x9e\x71\x6c\x8f\xed\x04\x98\x51\xff\xfb\xc8\x01\xfa\x35\x45\x42\x51\xe2\xe7\xbc\x79\x8e\x8f\x13\x86\x98\x2b\xbd\x37\xbc\xac\x1c\x26\xe3\x8b\xbf\x70\xa7\x54\x29\x08\xb1\xcc\x02\x44\x42\x60\xe5\x97\x2c\x56\x64\xc9\xb4\x94\x07\xfd\x5e\x18\xfa\x3f\xee\x79\x46\xd2\x52\x8e\x46\xe6\x64\xe0\x2a\x42\xa4\x59\x56\xd1\x69\x65\x84\xff\xc9\x58\xae\x24\x26\xc1\x18\x43\x0f\x0c\x8e\x4b\x83\xf3\x59\x97\xb1\x57\x0d\x6a\xb6\x87\x54\x0e\x8d\x25\xb8\x8a\x5b\x14\x5c\x10\x68\x97\x91\x76\xe0\x12\x99\xaa\xb5\xe0\x4c\x66\x84\x2d\x77\x55\xf7\xa2\x63\x4c\x27\x83\xa7\x63\x88\x4a\x1d\xe3\x12\x0c\x99\xd2\x7b\xa8\xe2\x2d\x09\xe6\x5e\xc4\xfd\xaf\x72\x4e\x5f\x86\xe1\x76\xbb\x0d\x58\x27\x1d\x28\x53\x86\xe2\x00\xdb\xf0\x3e\x9e\xdf\x2e\x92\xdb\xdf\x27\xc1\xf8\xa5\xec\x41\x0a\xb2\x16\x86\xbe\x35\xdc\x50\x8e\x74\x0f\xa6\xb5\xe0\x19\x4b\x05\x41\xb0\x2d\x94\x01\x2b\x0d\x51\x0e\xa7\xbc\xf9\xd6\x70\xc7\x65\x39\x82\x55\x85\xdb\x32\x43\x5d\x4e\xce\xad\x33\x3c\x6d\xdc\xbb\xad\x3b\x79\x72\xfb\x0e\x50\x12\x4c\x62\x10\x25\x88\x93\x01\xae\xa3\x24\x4e\x46\x5d\xca\x63\xbc\xfe\x67\xf9\xb0\xc6\x63\xb4\x5a\x45\x8b\x75\x7c\x9b\x60\xb9\xc2\x7c\xb9\xb8\x89\xd7\xf1\x72\x91\x60\xf9\x37\xa2\xc5\x13\xfe\x8d\x17\x37\x23\x10\x77\x15\x19\xd0\x4e\x1b\xdf\x83\x32\xe0\x7e\x53\x8f\xe3\x44\x42\xf4\x4e\xa2\x50\x07\x29\xab\x29\xe3\x05\xcf\x20\x98\x2c\x1b\x56\x12\x4a\xd5\x92\x91\x5c\x96\xd0\x64\x6a\x6e\xfd\x78\x2d\x98\xcc\xbb\x1c\xc1\x6b\xee\x98\xeb\x9e\xfd\xd2\x5a\xd0\xef\x9d\xb5\xc7\x03\x31\xfd\x73\xdc\xef\x9d\xd1\xce\x91\xec\xee\xef\xee\x37\xd1\xea\x7a\x63\x49\x33\xc3\x1c\x6d\x6c\xc5\x72\x32\x1b\x95\x7e\xa1\xcc\x59\x5c\x82\xa4\xdf\xe5\x4f\x6b\x2a\x96\x73\x59\x6e\x4e\x8a\x9b\xe9\x64\xac\x59\xf6\xf5\x4d\x91\x60\x7b\xd5\x38\x0c\x85\xca\x3a\x39\x5c\x61\x7c\xee\x07\xd4\x52\xf6\x07\xb4\xb2\xb3\x4f\x99\x8b\x57\x26\x53\x42\x99\x59\xbf\x77\xe2\x3e\x44\xf9\xca\x8e\x6b\xc9\xb8\xf9\x47\x36\xe5\xd2\x1b\x1e\xd0\x46\xf2\x42\x99\x1a\x0f\x87\xeb\x75\x53\x14\x64\x96\x5d\x9f\xf8\xd1\xef\xf9\xb3\x59\x33\x37\x45\xdd\xea\x59\xbf\xf7\x8c\x26\x55\x5d\x56\xab\x78\x8e\x9a\x71\x39\x3c\x3f\x72\xa5\xd8\xfc\xa7\x2c\x3f\x5a\x34\xa9\x0a\xea\x56\xe3\x37\x2f\x32\x1d\x6a\x65\x83\xdd\xfe\xfb\x08\x17\xc1\xd8\x7f\x6b\xc0\xab\x1b\xae\x5e\xfa\x79\xee\xf7\x7e\x06\x00\x00\xff\xff\x19\x5f\xd1\x13\x02\x04\x00\x00")

func shadersTriVertBytes() ([]byte, error) {
	return bindataRead(
		_shadersTriVert,
		"shaders/tri.vert",
	)
}

func shadersTriVert() (*asset, error) {
	bytes, err := shadersTriVertBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "shaders/tri.vert", size: 1026, mode: os.FileMode(438), modTime: time.Unix(1568531766, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"shaders/tri-frag.spv": shadersTriFragSpv,
	"shaders/tri-vert.spv": shadersTriVertSpv,
	"shaders/tri.frag": shadersTriFrag,
	"shaders/tri.vert": shadersTriVert,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"shaders": &bintree{nil, map[string]*bintree{
		"tri-frag.spv": &bintree{shadersTriFragSpv, map[string]*bintree{}},
		"tri-vert.spv": &bintree{shadersTriVertSpv, map[string]*bintree{}},
		"tri.frag": &bintree{shadersTriFrag, map[string]*bintree{}},
		"tri.vert": &bintree{shadersTriVert, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

