// Code generated by go-bindata.
// sources:
// shaders/tri-frag.spv
// shaders/tri-vert.spv
// shaders/tri.frag
// shaders/tri.vert
// DO NOT EDIT!

package triangle

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _shadersTriFragSpv = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x54\x90\xcb\x4a\xc3\x50\x10\x86\xbf\xe4\x24\x4d\x6f\xf6\x62\x41\x77\x52\x71\x29\x94\x22\x55\x04\x51\x51\xc1\x6e\xba\xf0\xf2\x00\xe1\xd8\x86\xb4\x5a\xdb\x92\xa4\xae\x7d\x04\x1f\xd7\x8d\x20\x67\x3a\x8b\x36\x10\x92\xf9\xe6\x9f\x39\xff\x7f\x8c\x7f\x12\x81\x47\x44\x99\x0e\x9b\xa7\x8d\x8f\x07\xd4\x28\xc9\x77\x38\x7a\x1d\xf5\xf2\x62\xd2\x1b\x9c\xf7\x5d\xbf\x81\x11\x9d\xeb\x35\x89\x08\x40\xde\x4f\x3b\x5b\x38\x5e\x01\xea\x40\x0b\x23\x3c\x02\x0c\x06\x1f\xf8\xf1\x9c\xb6\xc2\x70\x14\xdf\xbd\xdc\xc7\x79\xb2\xb2\x99\x2d\x92\x38\x9f\xda\x49\x92\xc5\xcb\xb7\xf7\x64\x5c\xe4\xbb\x9a\xa9\x9d\xcc\x16\x69\x3c\xb7\x8b\x74\x6d\xd3\x24\x1e\x9c\xf5\x57\x76\xfc\x41\x48\xb0\x73\x6e\x48\x28\x67\xaf\x1f\x33\x9b\x3e\x2c\xe7\xcb\x6c\xc3\x9c\x97\xaf\x24\x2b\x14\x31\x94\xed\x70\xa4\x79\x5d\x5d\xdf\xaa\x3b\xf8\xe2\xf5\x58\x5c\x23\xff\x07\x18\x4a\x40\x17\x38\x24\x90\x4c\x25\xcd\xdd\x25\xa0\x2c\x19\x37\x59\xaf\xb4\xae\x28\x73\xfa\xaa\xea\x8d\xea\x6b\x7a\x7f\x55\xd5\xd7\xf4\xce\x1c\x3b\x25\x10\x6d\x43\xdc\x7c\xdf\x5e\x10\x8a\x87\x40\xfd\xb9\x1d\xbf\xf8\x84\xc0\xb5\xee\xde\xd3\xf9\x67\x42\x99\x6d\x2a\x63\x8b\xb5\x94\x79\x5b\xac\xad\xcc\xed\x7f\x22\x12\xff\xfb\x3a\xdf\xd2\xbe\xf3\x71\x83\x91\x3c\xae\xf7\x87\xc7\x25\x1e\xff\x01\x00\x00\xff\xff\xd7\x50\xd2\x7b\x3c\x02\x00\x00")

func shadersTriFragSpvBytes() ([]byte, error) {
	return bindataRead(
		_shadersTriFragSpv,
		"shaders/tri-frag.spv",
	)
}

func shadersTriFragSpv() (*asset, error) {
	bytes, err := shadersTriFragSpvBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "shaders/tri-frag.spv", size: 572, mode: os.FileMode(438), modTime: time.Unix(1563438193, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _shadersTriVertSpv = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x5c\x92\x41\x6f\xd3\x40\x10\x85\x3f\x7b\xed\xb8\x69\x69\x68\x28\xa4\x85\x26\x05\xc4\x11\xa9\xaa\x50\x41\x48\x08\x50\x29\x52\x38\xe4\x50\xa8\xc4\xd5\x32\xc9\x2a\x35\x04\x3b\xb2\x0d\x42\x9c\xf8\x09\xfc\x5c\x2e\x48\x68\x67\xc7\x95\xcb\x5e\xec\x79\x6f\xe6\xcd\x9b\xdd\x31\xe1\xa3\x04\x02\x12\x36\xb8\x8f\x3f\x43\x42\x02\x60\x8b\x9e\x7c\xa7\xb3\x8b\xd9\x51\xdd\x2c\x8e\x4e\x9e\x1e\x3b\x7e\x80\x91\x3c\xc7\xdd\xa4\x2f\xff\x11\xf0\x35\xcb\x0b\xf7\xbf\x0d\xdc\x02\xc6\xc0\x04\x30\x18\x42\xe0\x77\xe0\xf2\xfa\x4c\x67\xe9\xe9\x87\x37\x69\x6d\xd7\x59\x95\x35\x36\xad\x2f\xb3\x85\xad\xd2\xf2\xd3\x67\x3b\x6f\xea\xeb\x39\x97\xd9\x22\x2f\x96\xe9\x2a\x2b\x96\xdf\xb2\xa5\x4d\x4f\x9e\x1c\xaf\xb3\xf9\x17\x62\xa2\x6b\x3d\x63\x7a\x6c\x01\xcb\x55\x7a\x6e\xab\x8f\xb6\x6a\xec\x0f\x87\xf7\x14\x47\xb9\xb2\xce\x9b\xbc\x2c\xe8\x91\x08\x1e\xb4\x78\x5e\x34\x17\xf9\x4f\xeb\x6b\x3c\x17\x7a\xee\x6c\x95\xaf\xdf\xe6\x75\x93\x15\x73\x4b\x8c\x91\xf9\x7c\x4f\x23\x73\xae\xcb\x9a\x98\x58\xe6\xfd\x6e\xab\xe6\xac\x5c\x95\x95\xf0\x91\xcc\x3f\xd7\xf8\x1d\xf1\x95\x97\xf6\xdb\x62\x81\x62\x41\x07\x0b\x15\x73\xb7\x3d\xc5\x5c\x61\x53\x22\xe9\x7b\xa8\x1a\x2e\x1e\xff\x17\x4f\x34\x76\x7a\xbb\x84\x52\xf7\x50\x5e\xc2\x6b\x8c\x30\xf4\x80\x07\xc0\x1e\x11\x89\xcc\xed\xdf\xf1\x0e\x11\x1b\xca\xb9\xf3\x58\xe3\xbe\xea\x8d\x89\xd8\xd4\xfc\xbe\xf4\xf1\x7e\x5b\x8d\x4d\xa9\x8d\xb8\xa1\xde\x1d\xf7\x42\xe3\x6d\xc5\x5c\x8f\x81\xf6\x08\xb4\xc7\x40\xf6\xc9\x1f\xe7\x69\x47\xf5\x8c\xea\x0d\x35\x77\x47\xf5\x86\xba\x67\x6d\xbd\xcb\xbd\x2d\xd5\xbf\x5e\xbb\xfc\xbb\x5a\x9b\x68\xfd\x81\xc6\x6d\xfd\x81\xee\xa8\xe9\xe8\x4d\x54\xef\x19\xb1\xdc\x53\xa4\x7e\x5c\xce\x1f\x42\x62\xe0\xa5\x7a\xdb\xd5\xfe\xef\x65\xfb\xdc\x4c\x1e\xa3\x83\x8d\x14\x0b\x3a\xd8\x9e\x62\x4e\xff\x9c\x44\xfc\xed\x6b\xfd\x48\x79\x37\xc7\x29\xb1\xcc\x70\x4f\xef\xcd\xdd\xcd\x2b\x8c\xc4\xfb\x1d\x1f\x87\xea\xdb\x71\xed\x1e\xfc\x25\xe0\x39\x01\xff\x02\x00\x00\xff\xff\x50\x8a\x0e\xfe\xe0\x03\x00\x00")

func shadersTriVertSpvBytes() ([]byte, error) {
	return bindataRead(
		_shadersTriVertSpv,
		"shaders/tri-vert.spv",
	)
}

func shadersTriVertSpv() (*asset, error) {
	bytes, err := shadersTriVertSpvBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "shaders/tri-vert.spv", size: 992, mode: os.FileMode(438), modTime: time.Unix(1563438195, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _shadersTriFrag = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x92\x4f\x6f\x9b\x40\x10\xc5\xef\x96\xfc\x1d\x9e\x9c\x8b\x23\xb9\x40\xdc\xa8\x87\x44\x39\x10\xe7\x4f\x51\x23\x5b\x32\x4e\xa3\x9c\xac\xf5\x32\x86\x69\xd7\xbb\x74\x77\x01\xd3\xaa\xdf\xbd\x82\xd8\x51\xa2\xb6\x48\x1c\xd8\x79\xef\xf1\xdb\x99\x09\x43\xcc\x4c\xd9\x5a\xce\x0b\x8f\x69\x74\xf6\x09\xf7\xc6\xe4\x8a\x90\x68\x19\x20\x56\x0a\xcb\xae\xe4\xb0\x24\x47\xb6\xa6\x2c\x18\x0e\xc2\xb0\x7b\xf1\xc0\x92\xb4\xa3\x0c\x95\xce\xc8\xc2\x17\x84\xb8\x14\xb2\xa0\x63\x65\x82\xaf\x64\x1d\x1b\x8d\x69\x10\x61\xdc\x09\x46\x87\xd2\xe8\xf4\xb2\xcf\x68\x4d\x85\x9d\x68\xa1\x8d\x47\xe5\x08\xbe\x60\x87\x2d\x2b\x02\xed\x25\x95\x1e\xac\x21\xcd\xae\x54\x2c\xb4\x24\x34\xec\x8b\xfe\x47\x87\x98\x1e\x06\xcf\x87\x10\xb3\xf1\x82\x35\x04\xa4\x29\x5b\x98\xed\x5b\x25\x84\x7f\x05\xef\x9e\xc2\xfb\xf2\x22\x0c\x9b\xa6\x09\x44\x0f\x1d\x18\x9b\x87\xea\x45\xec\xc2\x87\x64\x76\x3b\x4f\x6f\x3f\x4c\x83\xe8\xd5\xf6\xa8\x15\x39\x07\x4b\x3f\x2a\xb6\x94\x61\xd3\x42\x94\xa5\x62\x29\x36\x8a\xa0\x44\x03\x63\x21\x72\x4b\x94\xc1\x9b\x8e\xbc\xb1\xec\x59\xe7\x13\x38\xb3\xf5\x8d\xb0\xd4\xe7\x64\xec\xbc\xe5\x4d\xe5\xdf\xb5\xee\xc8\xc9\xee\x9d\xc0\x68\x08\x8d\x51\x9c\x22\x49\x47\xb8\x8e\xd3\x24\x9d\xf4\x29\x4f\xc9\xea\xf3\xe2\x71\x85\xa7\x78\xb9\x8c\xe7\xab\xe4\x36\xc5\x62\x89\xd9\x62\x7e\x93\xac\x92\xc5\x3c\xc5\xe2\x0e\xf1\xfc\x19\x5f\x92\xf9\xcd\x04\xc4\xbe\x20\x0b\xda\x97\xb6\xbb\x83\xb1\xe0\xae\xa9\x87\x71\x22\x25\x7a\x07\xb1\x35\x2f\x50\xae\x24\xc9\x5b\x96\x50\x42\xe7\x95\xc8\x09\xb9\xa9\xc9\x6a\xd6\x39\x4a\xb2\x3b\x76\xdd\x78\x1d\x84\xce\xfa\x1c\xc5\x3b\xf6\xc2\xf7\x67\x7f\x5d\x2d\x18\x0e\x4e\xea\xc3\x42\x9c\x47\xd1\x70\x70\x42\x7b\x4f\xba\xff\xbe\x7f\x58\xc7\xcb\xeb\xb5\xa3\x52\x58\xe1\x69\xed\x0a\x91\x91\x5d\x9b\xcd\x37\x92\xde\xe1\x02\xa4\xbb\x2e\xff\xd3\x53\x88\x8c\x75\xbe\x3e\x22\xae\xcf\xa7\x51\x29\xe4\xf7\x37\xa6\xe1\x40\x89\xd6\x54\x1e\x63\x65\x64\x8f\x87\x2b\x44\xa7\xdd\x88\x6a\x92\x1f\x51\x93\xf5\x33\xa3\x8c\xbd\xfc\x9f\xb2\x3b\xaa\x49\x9e\xa3\xba\xb3\x22\x3f\x6a\x6b\xc3\x19\x76\x82\xf5\xf8\x14\xbf\x86\x03\xe0\x4d\x19\x57\xbd\x61\xfc\x9a\x1d\xec\xdb\x9f\x13\x9c\x05\x51\xb7\xfa\xbf\x87\x83\x3f\x01\x00\x00\xff\xff\xc3\x59\x17\x3e\x7a\x03\x00\x00")

func shadersTriFragBytes() ([]byte, error) {
	return bindataRead(
		_shadersTriFrag,
		"shaders/tri.frag",
	)
}

func shadersTriFrag() (*asset, error) {
	bytes, err := shadersTriFragBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "shaders/tri.frag", size: 890, mode: os.FileMode(438), modTime: time.Unix(1563437510, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _shadersTriVert = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x93\x4f\x6f\xdb\x38\x10\xc5\xef\x06\xfc\x1d\x1e\x9c\x8b\x03\x78\x25\xc5\x1b\xec\x21\x41\x0e\x8a\x93\xcd\x0a\x1b\xd8\x85\xe5\x34\xc8\xc9\xa0\xa9\xb1\x34\x2d\x4d\xb2\x24\xfd\x47\x2d\xfa\xdd\x0b\x29\x72\xfe\xb4\x11\xa0\x83\x34\xef\x3d\xfe\x66\x46\x8a\x63\x4c\x8c\xad\x1d\x97\x55\xc0\x38\x39\xfb\x07\x77\xc6\x94\x8a\x90\x69\x19\x21\x55\x0a\xf3\xa6\xe4\x31\x27\x4f\x6e\x47\x45\xd4\xef\xc5\x71\x73\xe3\x9e\x25\x69\x4f\x05\xb6\xba\x20\x87\x50\x11\x52\x2b\x64\x45\xc7\xca\x08\x9f\xc9\x79\x36\x1a\xe3\x28\xc1\xb0\x11\x0c\xba\xd2\xe0\xf4\xb2\xcd\xa8\xcd\x16\x1b\x51\x43\x9b\x80\xad\x27\x84\x8a\x3d\xd6\xac\x08\x74\x90\x64\x03\x58\x43\x9a\x8d\x55\x2c\xb4\x24\xec\x39\x54\xed\x41\x5d\x4c\x0b\x83\xa7\x2e\xc4\xac\x82\x60\x0d\x01\x69\x6c\x0d\xb3\x7e\xab\x84\x08\x2f\xe0\xcd\x55\x85\x60\x2f\xe2\x78\xbf\xdf\x47\xa2\x85\x8e\x8c\x2b\x63\xf5\x2c\xf6\xf1\x7d\x36\xb9\x9d\xe6\xb7\x7f\x8d\xa3\xe4\xc5\xf6\xa0\x15\x79\x0f\x47\xdf\xb6\xec\xa8\xc0\xaa\x86\xb0\x56\xb1\x14\x2b\x45\x50\x62\x0f\xe3\x20\x4a\x47\x54\x20\x98\x86\x7c\xef\x38\xb0\x2e\x47\xf0\x66\x1d\xf6\xc2\x51\x9b\x53\xb0\x0f\x8e\x57\xdb\xf0\x6e\x74\x47\x4e\xf6\xef\x04\x46\x43\x68\x0c\xd2\x1c\x59\x3e\xc0\x75\x9a\x67\xf9\xa8\x4d\x79\xcc\x16\xff\xcd\x1e\x16\x78\x4c\xe7\xf3\x74\xba\xc8\x6e\x73\xcc\xe6\x98\xcc\xa6\x37\xd9\x22\x9b\x4d\x73\xcc\xfe\x45\x3a\x7d\xc2\xff\xd9\xf4\x66\x04\xe2\x50\x91\x03\x1d\xac\x6b\x7a\x30\x0e\xdc\x0c\xb5\x5b\x27\x72\xa2\x77\x10\x6b\xf3\x0c\xe5\x2d\x49\x5e\xb3\x84\x12\xba\xdc\x8a\x92\x50\x9a\x1d\x39\xcd\xba\x84\x25\xb7\x61\xdf\xac\xd7\x43\xe8\xa2\xcd\x51\xbc\xe1\x20\x42\xfb\xee\x8f\xd6\xa2\x7e\xef\x64\xd7\x7d\x10\xe7\x49\xd2\xef\x9d\xd0\x21\x90\x6e\x9f\xef\xee\x97\xe9\xfc\x7a\xe9\xc9\x0a\x27\x02\x2d\x7d\x25\x0a\x72\x4b\xb3\xfa\x42\x32\x78\x5c\x80\x74\x33\xe5\x0f\x3d\x95\x28\x58\x97\xcb\x23\xe2\xf2\x7c\x9c\x58\x21\xbf\xbe\x31\x29\x51\x9b\x6d\xc0\x50\x19\xd9\xc2\xe1\x0a\xc9\x69\xb3\xa0\x1d\xc9\xbf\x61\x8d\xbf\xfc\x50\x73\xf6\xaa\x91\x46\x19\x77\xd9\xef\x1d\x75\xbf\x45\x35\xce\x56\xb7\x23\x17\x26\x9d\x76\x67\xb8\xc0\x46\xb0\x1e\x9e\xe2\x47\xbf\x07\xa0\x54\xcb\x4f\xc6\x73\xe7\xdb\x91\x3c\x1f\x5a\xe3\xa3\x43\xfd\x7d\x84\xb3\x28\x69\xfe\x09\xe0\x35\x03\x57\x2f\xe7\xfe\xec\xf7\x7e\x05\x00\x00\xff\xff\x1e\x4d\x59\x4c\xaa\x03\x00\x00")

func shadersTriVertBytes() ([]byte, error) {
	return bindataRead(
		_shadersTriVert,
		"shaders/tri.vert",
	)
}

func shadersTriVert() (*asset, error) {
	bytes, err := shadersTriVertBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "shaders/tri.vert", size: 938, mode: os.FileMode(438), modTime: time.Unix(1563437615, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"shaders/tri-frag.spv": shadersTriFragSpv,
	"shaders/tri-vert.spv": shadersTriVertSpv,
	"shaders/tri.frag": shadersTriFrag,
	"shaders/tri.vert": shadersTriVert,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"shaders": &bintree{nil, map[string]*bintree{
		"tri-frag.spv": &bintree{shadersTriFragSpv, map[string]*bintree{}},
		"tri-vert.spv": &bintree{shadersTriVertSpv, map[string]*bintree{}},
		"tri.frag": &bintree{shadersTriFrag, map[string]*bintree{}},
		"tri.vert": &bintree{shadersTriVert, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

